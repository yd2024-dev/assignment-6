# Main Nginx Configuration file

user nginx;  # Define user running the Nginx worker
worker_processes 1;  # Number of worker processes to handle requests (usually set to number of CPUs)

# Main log settings
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Global events block (defaults)
events {
    worker_connections 1024;  # Maximum number of simultaneous connections per worker
}

# HTTP block for reverse proxy and load balancing configuration
http {

    # Define cache zone for proxy caching
    proxy_cache_path /tmp/cache keys_zone=cache_zone:10m max_size=1g inactive=60m use_temp_path=off;
    
    # Include file types (for static content types)
    include /etc/nginx/mime.types;  # Includes the mime.types file for content types
    default_type application/octet-stream;  # Default mime type for files

    # General HTTP settings
    sendfile on;  # Enables sendfile for better performance
    tcp_nopush on;  # Reduces the amount of data transmitted over a TCP connection
    tcp_nodelay on;  # Ensures faster transmission of small data packets
    keepalive_timeout 65;  # Time to keep connections alive
    types_hash_max_size 2048;  # Increases the types hash size for faster lookups

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Load server blocks from conf.d directory (this will include default.conf if present)
    include /etc/nginx/conf.d/*.conf;

    # Define an upstream backend group for load balancing
    upstream backend {
        server server:3000;
        server server-2:3000;
        server server-3:3000;
    }

    # Start defining server block
    server {
        listen 80;  # Listen on HTTP port

        # Proxy for books route with caching
        location /books/ {
            # Enable caching only for this location
            proxy_cache cache_zone;
            proxy_cache_valid 200 60m;  # Cache successful responses for 1 hour

            # Reverse proxy the book routes to the frontend service
            proxy_pass http://front-end:9080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy frontend requests to the front-end container
        location / {
            proxy_pass http://front-end:9080;  # Frontend container at port 9080
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy API requests and adjust URL path
        location /api/ {
            rewrite ^/api/(.*) /$1 break;  # Remove '/api' prefix before proxying
            proxy_pass http://backend/;  # Backend servers (round robin load balancing)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Serve Swagger UI for API documentation
        location /api/docs {
            proxy_pass http://server:3000/api/docs;  # Redirect to Swagger UI on the server
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static files (optional)
        location /static/ {
            root /usr/share/nginx/html;  # Adjust the location based on where static assets are served
        }

        # Health check endpoint for Nginx itself (optional)
        location /health {
            access_log off;
            return 200 'OK';
        }
    }  # Closing the server block
}  # Closing the http block
